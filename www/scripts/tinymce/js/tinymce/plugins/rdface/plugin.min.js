tinymce.PluginManager.add("rdface", function(a,b) {
	// will return true if editor is inline
	// console.log('Inline: '+(a.inline?'yes':'no'));
	a.addButton("rdfaceMain", {
		type:'listbox',
		text : "Inline Semantics",
		icon : !1,
		values:[
		        {
		        	text:'Annotated Entities',
		        	menu:[
		        	      {
		        	    	  text:'Faceted Viewing',
		        	    	  onclick:function(){
		      		    			a.windowManager.open({
		    		    				title : "Faceted Viewing",
		    		    				url : b + "/facets.htm",
		    		    				width : 500,
		    		    				height : 260
		    		    			});
		    		    			window.rdface_editor = a;
		    		    	        window.rdface_plugin_url = b;
		        				}
		        	      },
		        	      {
		        	    	  text:'Show All',
		        	    	  onclick:function(){
		        					show_entities(a,'all');
		        				}
		        	      },
		        	      {
		        	    	  text:'Hide All',
		        	    	  onclick:function(){
		        					show_entities(a,'none');
		        				}
		        	      },
		        	      {
		        	    	  text:'Remove All',
		        	    	  onclick:function(){
		        	    		  remove_annotations(a,0);
		        				}
		        	      }
		        	      ]
		        },
		        {
		        	text:'Configuration',
		    		onclick : function() {
		    			a.windowManager.open({
		    				title : "RDFaCE Settings",
		    				url : b + "/setting.htm",
		    				width : 500,
		    				height : 360
		    			})
		    			window.rdface_editor = a;
		    	        window.rdface_plugin_url = b;
		    		}
		        },
		        {
		        	text:'HTML Source Code',
		    		onclick : function() {
		    			a.windowManager.open({
		    				title : "HTML Source Code",
		    				url : b + "/source.htm",
		    				width : 520,
		    				height : 330,
		    				buttons : [/* 
		   		    				{
				    					text : "Update",
				    					onclick : function(e) {
				    						console.log(e.currentTarget);
				    					}
				    				},*/
		    				        {
				    					text : "Close",
				    					onclick : "close"
		    				}]
		    			})
		    			window.rdface_editor = a;
		    	        window.rdface_plugin_url = b;
		    		}
		        },
		        {
		        	text:'About RDFaCE',
		    		onclick : function() {
		    			a.windowManager.open({
		    				title : "About RDFaCE",
		    				url : b + "/help.htm",
		    				width : 500,
		    				height : 330,
		    				buttons : [ {
		    					text : "Close",
		    					onclick : "close"
		    				} ]
		    			})
		    		}
		        }
		        ]
	});
    var baseURL = baseURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '') + '/';
	a.addButton("rdfaceRun", {
		text : "Annotate",
		tooltip : "Automatically annotate content",
		icon : !1,
		onclick : function(v1) {
			var aF=$.cookie("annotationF");
			a.windowManager.open({
				title : "Annotating content...",
				url : 			baseURL + "vocabulary/inline/pages/annotate",
				width : 500,
				height : 330,
				buttons : [ {
					text : "Close",
					onclick : "close"
				} ]
			});
			window.rdface_editor = a;
	        window.rdface_plugin_url = b;
			window.rdface_annotationF = aF;
		}
	});
	a.addCommand("showTooltips", function() {
		editor=a;
		var xOffset = -10; // x distance from mouse
		var yOffset = 10; // y distance from mouse
		$.each($(editor.getDoc()).find('.r_entity'), function(index, value) { 
			// show tooltips if word count <6
			if(countWords($(value).text())<6){
				$(this).unbind('click').click(function(e) {
					e.stopPropagation();
					editor.execCommand('editEntity',$(this));
				});	
				$(this).unbind('mouseover').mouseover(function(e) {								
					e.stopPropagation();
					var top = (e.pageY + yOffset); var left = (e.pageX + xOffset);
					$(this).css("background-color","orange");
					$(this).css("cursor","pointer");
					$(this).append(' <span id="typeof'+index+'" class="tooltip"><img id="arrow'+index+'" class="arrow"/>'+prepareTooltipContent($(this),0)+'</span>');
					$(editor.getDoc()).find('span#typeof'+index+' #arrow'+index).attr("src", b + "/img/arrow.png");
					$(editor.getDoc()).find('span#typeof'+index).css("top", top+"px").css("left", left+"px");
				});
				$(this).unbind('mousemove').mousemove(function(e) {
					var top = (e.pageY + yOffset);
					var left = (e.pageX + xOffset);
					$(editor.getDoc()).find('span#typeof'+index+' #arrow'+index).attr("src", b + "/img/arrow.png");
					$(editor.getDoc()).find('span#typeof'+index).css("top", top+"px").css("left", left+"px"); 
				});										
				$(this).unbind('mouseout').mouseout(function() {
					$(this).css("background-color","");
					$(this).css("cursor","");
					$(editor.getDoc()).find('span#typeof'+index).remove();
					$(this).html($(this).html().trim());// remove one space
				});	
		   }else{
			   // we should show an appended icon to edit the entity
				$(this).unbind('mouseover').mouseover(function(e) {								
					// e.stopPropagation();
					var position = $(this).position();
					if(position.top<10){
						if($(editor.getDoc()).find('#inline_edit_btn'+index).length){
							$(editor.getDoc()).find('#inline_edit_btn'+index).css('left',position.left).css('top',$(this).height()+10);
						}else{
							$(this).before('<div id="inline_edit_btn'+index+'" style="position:absolute;z-index:199;left:'+(position.left)+'px;top:'+($(this).height()+10)+'px;"><a class="btn small">Edit '+getTypeOfEntity($(this),$.cookie("annotationF"))+'</a></div>');
						}	
					}else{
						if($(editor.getDoc()).find('#inline_edit_btn'+index).length){
							$(editor.getDoc()).find('#inline_edit_btn'+index).css('left',position.left).css('top',position.top-25);
						}else{
							$(this).before('<div id="inline_edit_btn'+index+'" style="position:absolute;z-index:199;left:'+(position.left)+'px;top:'+(position.top-25)+'px;"><a class="btn small">Edit '+getTypeOfEntity($(this),$.cookie("annotationF"))+'</a></div>');
						}
					}
				});
				$(this).unbind('mousemove').mousemove(function(e) {
					// e.stopPropagation();
					var position = $(this).position();
					if(position.top<10){
						if($(editor.getDoc()).find('#inline_edit_btn'+index).length){
							$(editor.getDoc()).find('#inline_edit_btn'+index).css('left',position.left).css('top',$(this).height()+10);
						}else{
							$(this).before('<div id="inline_edit_btn'+index+'" style="position:absolute;z-index:199;left:'+(position.left)+'px;top:'+($(this).height()+10)+'px;"><a class="btn small">Edit '+getTypeOfEntity($(this),$.cookie("annotationF"))+'</a></div>');
						}	
					}else{
						if($(editor.getDoc()).find('#inline_edit_btn'+index).length){
							$(editor.getDoc()).find('#inline_edit_btn'+index).css('left',position.left).css('top',position.top-25);
						}else{
							$(this).before('<div id="inline_edit_btn'+index+'" style="position:absolute;z-index:199;left:'+(position.left)+'px;top:'+(position.top-25)+'px;"><a class="btn small">Edit '+getTypeOfEntity($(this),$.cookie("annotationF"))+'</a></div>');
						}
					}
				});										
				$(this).unbind('mouseout').mouseout(function(e) {
					// e.stopPropagation();
					var refObj=$(this);
				    var timeoutId = setTimeout(function(){
				    	$(editor.getDoc()).find('#inline_edit_btn'+index).remove();
				    }, 800);
				    $(editor.getDoc()).find('#inline_edit_btn'+index).mouseover(function(ev) {
				    	ev.stopPropagation();
				    	clearTimeout(timeoutId);
					});
				    $(editor.getDoc()).find('#inline_edit_btn'+index).mouseout(function(ev) {
				    	ev.stopPropagation();
				    	$(editor.getDoc()).find('#inline_edit_btn'+index).remove();
					});	
				    $(editor.getDoc()).find('#inline_edit_btn'+index).click(function(ev) {								
						ev.stopPropagation();
						if($(editor.getDoc()).find('#inline_edit_btn'+index).length){
							$(editor.getDoc()).find('#inline_edit_btn'+index).remove();
							editor.execCommand('editEntity',refObj);
						}
					});
				});
			   
		   }

		});
		$.each($(editor.getDoc()).find('.r_prop'), function(index, value) {
			$(this).unbind('mouseover').mouseover(function(e) {								
				e.stopPropagation();
				var top = (e.pageY + yOffset); var left = (e.pageX + xOffset);
				$(this).css("background-color","#FFFC00");
				$(this).append(' <span id="typeof'+index+'" class="tooltip"><img id="arrow'+index+'" class="arrow"/>'+prepareTooltipContent($(this),1)+'</span>');
				$(editor.getDoc()).find('span#typeof'+index+' #arrow'+index).attr("src", b + "/img/arrow.png");
				$(editor.getDoc()).find('span#typeof'+index).css("top", top+"px").css("left", left+"px");
			});
			$(this).unbind('mousemove').mousemove(function(e) {
				var top = (e.pageY + yOffset);
				var left = (e.pageX + xOffset);
				$(editor.getDoc()).find('span#typeof'+index+' #arrow'+index).attr("src", b + "/img/arrow.png");
				$(editor.getDoc()).find('span#typeof'+index).css("top", top+"px").css("left", left+"px"); 
			});										
			$(this).unbind('mouseout').mouseout(function() {
				$(this).css("background-color","");
				$(editor.getDoc()).find('span#typeof'+index).remove();
				$(this).html($(this).html().trim());// remove one space
			});	
		});
	});
	a.addCommand("editEntity", function(v1) {
		var entity_type,param;
		var aF=$.cookie("annotationF");
		if(aF=="RDFa"){
				entity_type=v1.attr('typeof').split(':')[1];
				// send the content as parameter
				param= v1.find('span[property="schema:name"]').text();
		}else{
				entity_type=v1.attr('itemtype').split('http://schema.org/')[1];
				// send the content as parameter
				param= v1.find('span[itemprop="name"]').text();
		}
			var file,height,width;
			//file=b + "/schema.htm";
			file=baseURL + "vocabulary/inline/pages/schema";
			height=500;
			width=500;
			a.windowManager.open({
				title: "Edit "+entity_type,
				url: file,
				width :500,
				height : 500
				/*
				 * ,buttons : [ { text : "Close", onclick : "close" } ]
				 */
			})
			window.rdface_editor = a;
	        window.rdface_plugin_url = b;
			window.rdface_entity_type = entity_type;
			window.rdface_selected_txt = param;
			window.rdface_annotationF = aF;
			window.rdface_pointer = v1;
	});							
	a.on("NodeChange",function(e){
		a.execCommand('showTooltips');
	})
	a.on("LoadContent",function(e){
		// detect existing annotations
		// todo:check if they are in the scope of selected schemas or not
		var aF=$.cookie("annotationF");
		var editor=a;
		var format=aF;
		// for RDFa and Microdata
		// ToDo: does not work if user uses 'vocab' attribute
		var tmp;
		if(format=='RDFa'){
			$.each($(editor.getDoc()).find('*[typeof]'), function(key,value){
				tmp=$(value).attr('typeof');
				tmp='r_'+tmp.split(':')[1].toLowerCase();
				if(!$(value).hasClass('r_entity')){
					$(value).addClass('r_entity');
				}
				// specific entity class
				if(!$(value).hasClass(tmp)){
					$(value).addClass(tmp);
				}
			});		
		}else{
			$.each($(editor.getDoc()).find('*[itemtype]'), function(key,value){
				tmp=$(value).attr('itemtype');
				tmp='r_'+tmp.split('http://schema.org/')[1].toLowerCase();
				if(!$(value).hasClass('r_entity')){
					$(value).addClass('r_entity');
				}
				// specific entity class
				if(!$(value).hasClass(tmp)){
					$(value).addClass(tmp);
				}
			});			
		}
		a.execCommand('showTooltips');
	})	
	a.on("submit",function(e){
		// remove the classes added for visualization in
		// the editor
	})		
	// set RDFa as default annotation format
	if(!$.cookie("annotationF")){
		// set RDFa as default annotation format
		setCookie("annotationF","RDFa",30);
	}
});
// some helper functions
function countWords(sentence){
	var s = sentence;
	s = s.replace(/(^\s*)|(\s*$)/gi,"");
	s = s.replace(/[ ]{2,}/gi," ");
	s = s.replace(/\n /,"\n");
	return s.split(' ').length;
}
function getTypeOfEntity(entityObj,ann_type){
	if(ann_type=="RDFa"){
		return entityObj.attr('typeof').split(':')[1];
	}else{
		return entityObj.attr('itemtype').split('http://schema.org/')[1];
	}	
}
function prepareTooltipContent(entityObj,is_property){
	if($.cookie("annotationF")=="RDFa"){
		if(is_property){
			output=entityObj.attr('property').split(':')[1];
		}else{
			var entityType=getTypeOfEntity(entityObj,'RDFa');
			var output="<ul class='tooltip-t' style='list-style: none;text-align:left;margin:0 0 0 0;padding-left: 1em;text-indent: -1em;'>";
			if(entityObj.attr('property')){
				output +="<li>"+entityObj.attr('property').split(':')[1]+"</li>";
			}
			output +="<li>Type: <b>"+entityType+"</b></li>";
			output +="</ul>";		
		}
	}else{
		if(is_property){
			output=entityObj.attr('itemprop');
		}else{
			var entityType=getTypeOfEntity(entityObj,'Microdata');
			var output="<ul class='tooltip-t' style='list-style: none;text-align:left;margin:0 0 0 0;padding-left: 1em;text-indent: -1em;'>";
			if(entityObj.attr('itemprop')){
				output +="<li>"+entityObj.attr('itemprop')+"</li>";
			}
			output +="<li>Type: <b>"+entityType+"</b></li>";
			output +="</ul>";	
		}

	}
	return output;
}
// Insert RDFa/Microdata attributes to HTML DOM tree
function insert_entity(editor,entity_type,b,has_rel){
	var selectedContent = editor.selection.getContent();
	var selectedContentText=editor.selection.getContent({format : 'text'})
	var selectedNode = editor.selection.getNode();
	var nodeContent = selectedNode.innerHTML;
	// remove tinymce redundant data-mcs-href attribute
	nodeContent = nodeContent.replace(/\s(data-mce-href=)".*?"/g, "");
	nodeContent = nodeContent.replace(/\s(xmlns=)".*?"/g, "");
	// console.log(selectedContent);
	if(!selectedContent){
		alert('Please select some text first!');
		return null;
	}
	var tmp=$(selectedContent);
	// get an URI for entity
	var uri='';
	// todo: we can get a uri for entity as well
	if($.cookie("annotationF")=="RDFa"){
		if(tmp.length){
			if(tmp.length>1){
				// console.log('add new div');
				var temp = ' class="r_entity r_'+entity_type.toLowerCase()+'" typeof="schema:'+entity_type+'"';
				if(uri){
					temp=temp+' resource="'+uri+'"';
				}
				if(has_rel){
					temp=temp+' property="schema:'+has_rel+'"';
				}
				var annotatedContent;
				annotatedContent = "<div" + temp + ">" + selectedContent
				+ "</div>";
				editor.selection.setContent(annotatedContent);
				//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
			}else{
				// console.log('update selected content');
				editor.dom.setAttrib(selectedNode,"typeof",'schema:'+entity_type);
				if(uri){
					editor.dom.setAttrib(selectedNode,"resource",uri);
				}
				if(has_rel){
					editor.dom.setAttrib(selectedNode,"property",'schema:'+has_rel);
				}
				editor.dom.setAttrib(selectedNode,"class",'r_entity r_'+entity_type.toLowerCase());
				if(countWords(nodeContent)<6)
					selectedNode.innerHTML="<span class='r_prop r_name' property='schema:name'>"+nodeContent+"</span>";
			}
		}else{
			// console.log('add new span');
			var temp = ' class="r_entity r_'+entity_type.toLowerCase()+'" typeof="schema:'+entity_type+'"';
			if(uri){
				temp=temp+' resource="'+uri+'"';
			}
			if(has_rel){
				temp=temp+' property="schema:'+has_rel+'"';
			}
			var annotatedContent;
			if(countWords(selectedContent)<6){
				annotatedContent = "<span" + temp + "><span class='r_prop r_name' property='schema:name'>" + selectedContent
				+ "</span></span>";
			}else{
				annotatedContent = "<span" + temp + ">" + selectedContent
				+ "</span>";
			}
			editor.selection.setContent(annotatedContent);
			//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
		}
		// add namespaces
		var ns =editor.dom.get('namespaces');
		var nsStart;
		var nsEnd;		
		if(ns){
			txt=ns.innerHTML;
			nsStart = "";
			nsEnd="";
		}else{
			nsStart = "<div id='namespaces' prefix='schema: http://schema.org/'>";
			nsEnd="</div>";
		}	
		$(editor.getBody()).html(nsStart+$(editor.getBody()).html()+nsEnd);
	}else{
		if(tmp.length){
			if(tmp.length>1){
				//console.log('add new div');
				var temp = ' class="r_entity r_'+entity_type.toLowerCase()+'" itemscope itemtype="http://schema.org/'+entity_type+'"';
				if(uri){
					temp=temp+' itemid="'+uri+'"';
				}
				if(has_rel){
					temp=temp+' itemscope itemprop="'+has_rel+'"';
				}
				var annotatedContent;
				annotatedContent = "<div" + temp + ">" + selectedContent
				+ "</div>";
				editor.selection.setContent(annotatedContent);
				//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
			}else{
				//console.log('update selected content');
				editor.dom.setAttrib(selectedNode,"itemtype",'http://schema.org/'+entity_type);
				if(uri){
					editor.dom.setAttrib(selectedNode,"itemid",uri);
				}
				if(has_rel){
					editor.dom.setAttrib(selectedNode,"itemprop",has_rel);
					editor.dom.setAttrib(selectedNode,"itemscope",' ');
				}
				//find a way to not delete the existing classes but update them
				editor.dom.setAttrib(selectedNode,"class",'r_entity r_'+entity_type.toLowerCase());
				if(countWords(nodeContent)<6)
					selectedNode.innerHTML="<span class='r_prop r_name' itemprop='name'>"+nodeContent+"</span>";
			}
		}else{
			//console.log('add new span');
			var temp = ' class="r_entity r_'+entity_type.toLowerCase()+'" itemscope itemtype="http://schema.org/'+entity_type+'"';
			if(uri){
				temp=temp+' itemid="'+uri+'"';
			}
			if(has_rel){
				temp=temp+' itemscope itemprop="'+has_rel+'"';
			}
			var annotatedContent;
			if(countWords(selectedContent)<6){
				annotatedContent = "<span" + temp + "><span class='r_prop r_name' itemprop='name'>" + selectedContent
				+ "</span></span>";
			}else{
				annotatedContent = "<span" + temp + ">" + selectedContent
				+ "</span>";
			}
			editor.selection.setContent(annotatedContent);
			//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
		}
		$(editor.getBody()).html($(editor.getBody()).html());
		//editor.setContent($(editor.getBody()).html());
	}
	editor.nodeChanged();
}
// Insert related attributes to HTML DOM tree
function insert_property(editor,property,b){
	var selectedContent = editor.selection.getContent();
	if(!selectedContent){
		alert('Please select some text first!');
		return null;
	}
	var selectedContentText=editor.selection.getContent({format : 'text'})
	var selectedNode = editor.selection.getNode();
	var nodeContent = selectedNode.innerHTML;
	// remove tinymce redundant data-mcs-href attribute
	nodeContent = nodeContent.replace(/\s(data-mce-href=)".*?"/g, "");
	nodeContent = nodeContent.replace(/\s(xmlns=)".*?"/g, "");

	// Annotation methods
	// if there is no need to add new tag
	if($.cookie("annotationF")=="RDFa"){
		if ((selectedContent == nodeContent) || (selectedContentText==$(selectedContent).html())) {
			editor.dom.setAttrib(selectedNode,"property",'schema:'+property);
			editor.dom.setAttrib(selectedNode,"class",'r_prop r_'+property.toLowerCase());
		} else {
			// we need to add a new neutral html tag which involves
			// our annotation attributes
			// to do this we also need to check whether there is a paragraph or
			// not (to use DIV or SPAN)
			var temp = ' class="r_prop r_'+property.toLowerCase()+'" property="schema:'+property+'"';

			var annotatedContent = "<span" + temp + ">" + selectedContent
			+ "</span>";
			if ((editor.selection.getRng().startContainer.data != editor.selection
					.getRng().endContainer.data)
					|| editor.selection.getRng().commonAncestorContainer.nodeName == "BODY") {
				annotatedContent = "<div" + temp + ">" + selectedContent
				+ "</div>";
			}
			editor.selection.setContent(annotatedContent);
			//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
		}
		$(editor.getBody()).html($(editor.getBody()).html());
	}else{
		if ((selectedContent == nodeContent) || (selectedContentText==$(selectedContent).html())) {
			editor.dom.setAttrib(selectedNode,"itemprop",property);
			editor.dom.setAttrib(selectedNode,"class",'r_prop r_'+property.toLowerCase());
		} else {
			// we need to add a new neutral html tag which involves
			// our annotation attributes
			// to do this we also need to check whether there is a paragraph or
			// not (to use DIV or SPAN)
			var temp = ' class="r_prop r_'+property.toLowerCase()+'" itemprop="'+property+'"';
			var annotatedContent = "<span" + temp + ">" + selectedContent
			+ "</span>";
			if ((editor.selection.getRng().startContainer.data != editor.selection
					.getRng().endContainer.data)
					|| editor.selection.getRng().commonAncestorContainer.nodeName == "BODY") {
				annotatedContent = "<div" + temp + ">" + selectedContent
				+ "</div>";
			}
			editor.selection.setContent(annotatedContent);
			//editor.execCommand('mceInsertRawHTML', false,annotatedContent);
		}
		$(editor.getBody()).html($(editor.getBody()).html());
	}
	editor.nodeChanged();
}
// show or hide selected entities
function show_entities(editor,c){
	if(c=='none'){
		$.each($(editor.getDoc()).find('.r_entity'), function(index, value) { 
			if($.browser.webkit == true){
				// Problem with Chrome: removing background color doesn't work!
				$(this).css('background-color','#fff');
			}else{
				$(this).css('background','none');
			}
			$(this).removeClass('r_entity').addClass('r_entity_h');		
		});		
		$.each($(editor.getDoc()).find('.r_prop'), function(index, value) { 
			if($.browser.webkit == true){
				// Problem with Chrome: removing background color doesn't work!
				$(this).css('background-color','#fff');
			}else{
				$(this).css('background','none');
			}
			$(this).removeClass('r_prop').addClass('r_prop_h');		
		});
	}else if(c=='all'){
		$.each($(editor.getDoc()).find('.r_entity_h'), function(index, value) {
			$(this).removeClass('r_entity_h').addClass('r_entity').removeAttr("style");		
		});		
		$.each($(editor.getDoc()).find('.r_prop_h'), function(index, value) {
			$(this).removeClass('r_prop_h').addClass('r_prop').removeAttr("style");		
		});	
	}else{
	// split the selected types
	}
	$(editor.getBody()).html($(editor.getBody()).html());
}
function remove_annotation(pointer,format){
		pointer.find('.tooltip').remove();
		pointer.find('.tooltip-t').remove();
	if(format=="RDFa"){
		pointer.css("background-color","");
		pointer.removeAttr("typeof").removeAttr("class").removeAttr("resource").removeAttr("property");
		pointer.find('>[property]').each(function(i,v){
			remove_annotation($(v),'RDFa')
		});
	}else{
		pointer.css("background-color","");
		pointer.removeAttr("itemtype").removeAttr("class").removeAttr("itemid").removeAttr("itemscope").removeAttr("itemprop");
		pointer.find('>[itemprop]').each(function(i,v){
			remove_annotation($(v),'Microdata')
		});	
	}
	// remove spans wich have no attribute
	pointer.find('span').each(function(i,v){
		if(!$(v)[0].attributes.length){
			// $(v).unwrap();
			$(v).replaceWith($(v).html());
		}
	});
	// remove pointer tags as well if necessary
	//var tagName=pointer.prop("tagName").toLowerCase();
	if(pointer.is('span') && !$(pointer)[0].attributes.length){
		// pointer.unwrap();
		pointer.replaceWith(pointer.html());
	}
}
function remove_annotations(editor,only_automatic){
	var tmp;
	var aF=$.cookie("annotationF");
		$(editor.getDoc()).find('.tooltip').remove();
		$(editor.getDoc()).find('.tooltip-t').remove();
		if(only_automatic){
			$(editor.getDoc()).find('.automatic').each(function(i,v){
				remove_annotation($(v),aF);
			});	
		}else{
			$(editor.getDoc()).find('.r_entity').each(function(i,v){
				remove_annotation($(v),aF);
			});		
		}
		// remove namespaces as well
		var ns=editor.dom.get('namespaces');
		if(ns){
			editor.setContent(ns.innerHTML);
		}
}
// creates random light colors
function get_random_color() {
    var letters = 'ABCDE'.split('');
    var color = '#';
    for (var i=0; i<3; i++ ) {
        color += letters[Math.floor(Math.random() * letters.length)];
    }
    return color;
}
function setCookie(c_name,value,exdays)
{
	$.cookie(c_name, value, { expires: exdays, path: '/' });
}